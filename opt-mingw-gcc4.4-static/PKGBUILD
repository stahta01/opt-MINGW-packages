# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Kirill MÃ¼ller <krlmlr@mailbox.org>

# Based on https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-gcc

OPT_PACKAGE_MINGW_PREFIX="opt-mingw-$MSYSTEM_CARCH"
_install_prefix="/opt$MINGW_PREFIX"

_enable_cxx=no

_enable_3_stages=no
_enable_graphite=no         # yes needs fixed                   library graphite added in GCC 4.4

_basename=gcc
_base_pkg_version=4.4
_realname=${_basename}${_base_pkg_version}
_gcc_suffix=""
#_gcc_suffix="-${_base_pkg_version}"
pkgbase=opt-mingw-${_realname}-static
pkgname=("${OPT_PACKAGE_MINGW_PREFIX}-${_realname}-static")
pkgver=${_base_pkg_version}.7
pkgrel=1
pkgdesc="GCC ${_base_pkg_version} for (mingw-w64)"
arch=('any')
mingw_arch=('mingw32')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${OPT_PACKAGE_MINGW_PREFIX}-toolchain")
makedepends=('lndir' 'make' 'patch' 'bison' 'flex' 'tar' 'diffutils'
             "${OPT_PACKAGE_MINGW_PREFIX}-binutils"
             "${OPT_PACKAGE_MINGW_PREFIX}-libiconv"
             "${OPT_PACKAGE_MINGW_PREFIX}-zlib"
             "${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base"
             "${OPT_PACKAGE_MINGW_PREFIX}-crt"
             "${OPT_PACKAGE_MINGW_PREFIX}-headers"
             "${OPT_PACKAGE_MINGW_PREFIX}-windows-default-manifest")
checkdepends=('dejagnu')
optdepends=()
options=('strip' '!debug' 'staticlibs' '!emptydirs' '!buildflags')
GMP_VERSION=4.3.2
MPFR_VERSION=2.4.2
MPC_VERSION=0.8.1
#ISL_VERSION=0.15
#CLOOG_VERSION=0.18.1
_sourcedir=${_basename}-${pkgver}
noextract=("${_sourcedir}.tar.bz2"
           "mpfr-$MPFR_VERSION.tar.bz2"
           "gmp-$GMP_VERSION.tar.bz2"
           "mpc-$MPC_VERSION.tar.gz"
           "isl-$ISL_VERSION.tar.bz2")
source=("https://ftp.gnu.org/gnu/gcc/${_basename}-${pkgver}/${_sourcedir}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-${GMP_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-${MPC_VERSION}.tar.gz"
        130-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
        140-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch
        150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch
        210-gcc-4.4-ktietz-libgomp.patch
        801-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
        802-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch
        803-gcc-4.4-add-DWARF2_UNWIND_INFO-guard.patch
        804-gcc-4.4-Fix-texi-docs-syntax-errors.patch
        805-gcc-4.4-PR-bootstrap-56258.patch)
sha256sums=('5ff75116b8f763fa0fb5621af80fc6fb3ea0f1b1a57520874982f03f26cd607f'
            'c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            'e664603757251fd8a352848276497a4c79b7f8b21fd8aedd5cc0598a38fee3e4'
            'c7870683c9e6b7606ed9e67f95c0deb9483844d04b8817fd95e1452da719a779'
            '06ec848499f2e802cd1da77341eea4e59d98e41cddd90769e7996a7b580ae6a7'
            '44d7f21e073c292e74ee7ee9858e31e993a4816af0a2ee09e0bb2acb557d2d33'
            'efd0d90eda577db320f1ed704efa5be87c4da09f1c95c3d067e0b563e477e579'
            'e0442e147448bd725d39bb8ce82b8e939ccc5b33b228388b43138022f1452b4c'
            '479ed5348b5946a0c1cf44d2ad5420fbd0a9b5266f11b7d4da222da1f0ba37d9'
            '61ea8447420cecad5c7dbe8dd29711f13afee076f87bc75105e11d9f64b820b9'
            '1f18d5a8c50f684b80dd091b4bda133627d75290031c9fc5da5833767d2c9490'
            '7f4b6dd96249f7bdc83f254f7f0ccf4704a89b52d63760ba9f4d5b8c4635ac04')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if [ ! -f "${srcdir}/${_patch}" ]; then
      msg2 "Skipping ${_patch} because it is missing"
    elif patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    elif patch --dry-run -Nbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    else
      msg2 "Skipping ${_patch} because it likely will fail"
    fi
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}

_extract() {
    local tarfile="$1"
    local extracted="$(echo "$tarfile" | sed 's/\.tar.*$//')"
    if [ ! -d  "$extracted" ]; then
        echo "Extracting ${tarfile}"
        tar -xf $tarfile
    fi
}

_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #

prepare() {
  cd ${srcdir}

  _extract                        ${_basename}-${pkgver}.tar.bz2
  _extract_to_gcc_folder          mpfr-${MPFR_VERSION}.tar.bz2
  _extract_to_gcc_folder          gmp-${GMP_VERSION}.tar.bz2
  _extract_to_gcc_folder          mpc-${MPC_VERSION}.tar.gz

  if [[ "$_enable_graphite" == "yes" ]]; then
    _extract_to_gcc_folder       isl-${ISL_VERSION}.tar.bz2
  else
    rm -fr ${srcdir}/${_sourcedir}/isl
  fi

  cd ${srcdir}/${_sourcedir}

  #remove files the patches will create (so they aren't in the way the 2nd time round)
  [ -f gcc/testsuite/g++.dg/cpp0x/lambda/lambda-names1.C ] && rm gcc/testsuite/g++.dg/cpp0x/lambda/lambda-names1.C

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  # do not expect $prefix/mingw symlink - this should be superceded by
  # 160-mingw-dont-ignore-native-system-header-dir.patch .. but isn't!
  [[ -f configure.src ]] && {
    rm -f configure
    cp configure.src configure
  } || {
    cp configure configure.src
  }
  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix
  [[ -f gcc/config/i386/mingw32.h.src ]] && {
    rm -f gcc/config/i386/mingw32.h
    cp gcc/config/i386/mingw32.h.src gcc/config/i386/mingw32.h
  } || {
    cp gcc/config/i386/mingw32.h gcc/config/i386/mingw32.h.src
  }
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${_install_prefix}/${MINGW_CHOST})
  sed -i "s/\\/mingw\\//${MINGW_NATIVE_PREFIX//\//\\/}\\//g" gcc/config/i386/mingw32.h

  # FIX "The directory that should contain system headers does not exist: /mingw/include"
  sed -i "s|/mingw/include|/mingw32/include|g" gcc/config/i386/t-mingw32

  # Don't waste valuable commandline chars on double-quotes around "arguments"
  #  that don't need them.
  apply_patch_with_msg 130-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

  # Make Windows behave the same as Posix in the consideration of whether folder
  # "/exists/doesnt-exist/.." is a valid path.. in Posix, it isn't.
  apply_patch_with_msg 140-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch

  # Don't make a lowercase backslashed path from argv[0]
  #  that then fail to strcmp with prefix(es) .. they're also ugly.
  apply_patch_with_msg 150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch

  # Kai's libgomp fix.
  apply_patch_with_msg 210-gcc-4.4-ktietz-libgomp.patch

  # https://patchwork.ozlabs.org/patch/504982/
  apply_patch_with_msg 801-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch

  apply_patch_with_msg 802-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch
  apply_patch_with_msg 803-gcc-4.4-add-DWARF2_UNWIND_INFO-guard.patch
  apply_patch_with_msg 804-gcc-4.4-Fix-texi-docs-syntax-errors.patch
  apply_patch_with_msg 805-gcc-4.4-PR-bootstrap-56258.patch
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  local -a configure_opts

  # gcc 4.4 may have issues doing these link options
  LDFLAGS=${LDFLAGS/,--dynamicbase}
  LDFLAGS=${LDFLAGS/,--nxcompat}
  LDFLAGS=${LDFLAGS/,--high-entropy-va}

  LDFLAGS+=" -Wl,--disable-runtime-pseudo-reloc" # maybe try this linker option

  echo "LDFLAGS := $LDFLAGS"

  case "${CARCH}" in
    i686)
#      configure_opts+=("--enable-sjlj-exceptions")
      configure_opts+=("--without-dwarf2")
      LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
    ;;

    x86_64)
#      configure_opts+=("--enable-sjlj-exceptions")
      configure_opts+=("--without-dwarf2")
      configure_opts+=("--enable-64bit")
      local _arch=x86-64
    ;;
  esac

  if [ "$_enable_3_stages" == "no" ]; then
    configure_opts+=("--disable-bootstrap")
  elif [ "$_enable_3_stages" == "yes" ]; then
    configure_opts+=("--enable-bootstrap")
  fi

  if [ "$_enable_graphite" == "yes" ]; then
    configure_opts+=("--with-cloog")
    configure_opts+=("--with-isl")
  fi

  local _languages="c"
  if [ "$_enable_cxx" == "yes" ]; then
    _languages+=",c++"
  else
    configure_opts+=("--disable-build-poststage1-with-cxx")
    configure_opts+=("--disable-build-with-cxx")
  fi

  export PATH=${_install_prefix}/bin:$PATH

  echo "PATH := $PATH"

  pacman -Q ${OPT_PACKAGE_MINGW_PREFIX}-crt
  gcc --version
  ld  --version

  ../${_sourcedir}/configure \
    --program-suffix=${_gcc_suffix} \
    --prefix=${_install_prefix} \
    --with-local-prefix=${_install_prefix}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${_install_prefix}/${MINGW_CHOST}/include \
    --libexecdir=${_install_prefix}/lib \
    --enable-checking=release \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --disable-libstdcxx-pch \
    --enable-version-specific-runtime-libs \
    --disable-lto \
    --disable-multilib \
    --disable-rpath \
    --disable-shared --enable-static \
    --enable-fully-dynamic-string \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --disable-libstdcxx-debug \
    --disable-threads \
    --disable-libgomp \
    --disable-libquadmath \
    --with-libiconv=${_install_prefix} \
    --with-zlib=${_install_prefix} \
    --with-pkgversion="Rev${pkgrel} static, Built by TimS opt-MINGW-packages project" \
    --with-bugurl="https://github.com/stahta01/opt-MINGW-packages/issues" \
    --with-gnu-as --with-gnu-ld \
    "${configure_opts[@]}"

  make -j1 all

  rm -rf ${srcdir}${_install_prefix}

  make -j1 DESTDIR=${srcdir} install
}

package_opt-mingw-gcc() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for (mingw-w64)"
  depends=(
    "${OPT_PACKAGE_MINGW_PREFIX}-binutils"
    "${OPT_PACKAGE_MINGW_PREFIX}-zlib"
    "${OPT_PACKAGE_MINGW_PREFIX}-crt"
    "${OPT_PACKAGE_MINGW_PREFIX}-headers"
  )
  provides=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base")
  conflicts=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base" "${OPT_PACKAGE_MINGW_PREFIX}-${_basename}")

  mkdir -p ${pkgdir}${_install_prefix}/{bin,include,lib,share}

  cd ${srcdir}${_install_prefix}
  cp bin/cpp.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/gcc.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/gcov.exe ${pkgdir}${_install_prefix}/bin/
  if [ "$_enable_cxx" == "yes" ]; then
    cp bin/c++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/g++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/${MINGW_CHOST}-c++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/${MINGW_CHOST}-g++.exe ${pkgdir}${_install_prefix}/bin/
  fi
  cp bin/${MINGW_CHOST}-gcc-${pkgver}.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/${MINGW_CHOST}-gcc.exe ${pkgdir}${_install_prefix}/bin/

  mkdir -p ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/include
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/include/*.h           ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver}/include/ssp        ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver}/include-fixed      ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver}/install-tools      ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/cc1.exe               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/collect2.exe          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/crt*.o                ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/libgcc*               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/libgcov.*             ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver}/libssp*               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/

  if [ "$_enable_cxx" == "yes" ]; then
    cp -r include/c++ ${pkgdir}${_install_prefix}/include/
    cp lib/gcc/${MINGW_CHOST}/${pkgver}/cc1plus.exe         ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
    cp lib/gcc/${MINGW_CHOST}/${pkgver}/libstdc++*          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
    cp lib/gcc/${MINGW_CHOST}/${pkgver}/libsupc++*          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${pkgver}/
  fi

  if [ "$_enable_cxx" == "yes" ]; then
    mkdir -p ${pkgdir}${_install_prefix}/share/gcc-${pkgver}/python
    cp -r share/gcc-${pkgver}/python/libstdcxx              ${pkgdir}${_install_prefix}/share/gcc-${pkgver}/python/
  fi
}

# Wrappers for package functions

package_opt-mingw-i686-gcc4.4-static() {
  package_opt-mingw-gcc
}

package_opt-mingw-x86_64-gcc4.4-static() {
  package_opt-mingw-gcc
}
