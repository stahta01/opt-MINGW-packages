# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Kirill MÃ¼ller <krlmlr@mailbox.org>

# Based on https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-gcc

OPT_PACKAGE_MINGW_PREFIX="opt-mingw-$MSYSTEM_CARCH"
_install_prefix="/opt$MINGW_PREFIX"

_enable_ada=no
_enable_cxx=no

_enable_intree_gmp_etc=yes  # No needs work
_enable_shared=no
_enable_3_stages=no
_enable_graphite=no         # yes is broken
_enable_threads=yes
_threads="win32"
if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
  _enable_libgomp=yes
else
  _enable_libgomp=no
fi

_basename=gcc
_realname=${_basename}4
_gcc_suffix=""
pkgbase=opt-mingw-${_realname}
pkgname=("${OPT_PACKAGE_MINGW_PREFIX}-${_realname}"
         $([[ "$_enable_shared" == "yes" ]] && echo "${OPT_PACKAGE_MINGW_PREFIX}-${_realname}-libs")
         $([[ "$_enable_ada" == "yes" ]] && echo "${OPT_PACKAGE_MINGW_PREFIX}-${_realname}-ada")
        )
pkgver=4.5.4.d20120702+42.c11.g41eccc86828
pkgrel=1
pkgdesc="GCC 4 git for (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${OPT_PACKAGE_MINGW_PREFIX}-toolchain")
makedepends=('lndir' 'make' 'patch' 'bison' 'flex' 'tar' 'diffutils'
             "${MINGW_PACKAGE_PREFIX}-binutils" # needed for strip binary
             "${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base"
             "${OPT_PACKAGE_MINGW_PREFIX}-libiconv"
             "${OPT_PACKAGE_MINGW_PREFIX}-zlib"
             "${OPT_PACKAGE_MINGW_PREFIX}-binutils"
             $([[ "$_enable_ada" == "yes" ]] && echo "${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-ada")
             "${OPT_PACKAGE_MINGW_PREFIX}-crt"
             "${OPT_PACKAGE_MINGW_PREFIX}-headers"
             "${OPT_PACKAGE_MINGW_PREFIX}-windows-default-manifest")
if [[ "$_enable_intree_gmp_etc" != "yes" ]]; then
  makedepends+=("${OPT_PACKAGE_MINGW_PREFIX}-mpc")
fi
if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
  makedepends+=("${OPT_PACKAGE_MINGW_PREFIX}-winpthreads")
fi
checkdepends=('dejagnu')
optdepends=()
options=('!debug' 'staticlibs' '!emptydirs' '!buildflags')
#_git_branch=releases/gcc-4.9                         # SVN: r??????  # end   4.9.?
#_git_branch=releases/gcc-4.8                         # SVN: r??????  # end   4.8.?
#_git_branch=releases/gcc-4.7                         # SVN: r??????  # end   4.7.?
#_git_branch=releases/gcc-4.6                         # SVN: r??????  # end   4.6.?
#_git_commit=d3bccded30236d16e477a7bbd79aff51724234b0 # SVN: r157990  # start 4.6.0
 _git_branch=releases/gcc-4.5                         # SVN: r189152  # end   4.5.4   Builds and runs okay
#_git_commit=310b8e53fe588696b2ecafdbb4e9404eeca88257 # SVN: r173115  # start 4.5.4
#_git_commit=ffd3d5cd62c1808a3705e05b697220f273e49d0b # SVN: r173113  # end   4.5.3
#_git_commit=637279192ef0678b8ea001074d25bb5067c6d8ce # SVN: r167948  # start 4.5.3
#_git_commit=ef132e31f53f6d58a36ed7e1bdfd66bed70f7455 # SVN: r167945  # end   4.5.2
#_git_commit=ddd656934e095b1d15915aa307ed45a77887df22 # SVN: r162777  # start 4.5.2
#_git_commit=88c1e55bd1f3e94e892aba390adf21a4ec5a2686 # SVN: r162773  # end   4.5.1   ?Builds and runs okay
#_git_commit=119fc32422d1394a331ff722f2744d85473b7d80 # SVN: r158342  # start 4.5.1   ?Builds and runs okay
#_git_commit=2f77df704ff54372859661815055b84056a75e41 # SVN: r158338  # end   4.5.0   Builds and runs okay
#_git_commit=a7796c74f683525052ebe604d339bfdad99d6231 # SVN: r150035  #  9025         ???
#_git_commit=6ae467eadc27db1267c9793a9b2f632ecb156bad # SVN: r148925  #  8449         configure: error: C compiler cannot create executables
#_git_commit=3be639f7468517f519a91a618ca0cf40ba76ba74 # SVN: r148919  #  8448         configure: error: C compiler cannot create executables
#_git_commit=70b28664eecba0763db09b28b6a81f38f9cec1d8 # SVN: r148917  #  8447         configure: error: C compiler cannot create executables
#_git_commit=2b426674815acc4d32ef39140e531f92cbf20e14 # SVN: r148903  #  8437         configure: error: C compiler cannot create executables
#_git_commit=00020c1638f4b23d9889cad741ef40b4997775bf # SVN: r148889  #  8425         configure: error: C compiler cannot create executables
#_git_commit=9006a1617947532ece5e1db63f5fa9199dc747c2 # SVN: r148888  #  8424       REDO Builds and 2nd GCC mpc configure: error: libmpfr not found or uses a different ABI.
#_git_commit=3259554a05a0c61919653257c71c741e57913fb6 # SVN: r148883  #  8422         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=73267076729bcff9502fdc86f6341de157395af5 # SVN: r148877  #  8420         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=792569a94a163072c0da7c5aaa53a3a31c649888 # SVN: r148847  #  8407         mpc configure: error: libmpfr not found or uses a different ABI.
#_git_commit=0bbf2ffa83ec25d7983de6ad4012d86c94e383d2 # SVN: r148841  #  8401         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=abe19d88066a6afdaf8c6917a631d21e30e4091c # SVN: r148835  #  8395       Next23
#_git_commit=a0c579997dc4771c9a7a5acb556d8057bff84a7d # SVN: r148825  #  8388         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=e9402aab8a080c1a14e7a4c6f942d6794735e6b0 # SVN: r148774  #  8349         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=47ff3434c752e46ca002d4d420b1d47b1762f119 # SVN: r148737  #  8323         mpc  configure: error: libgmp not found or uses a different ABI.
#_git_commit=ada506eaec8151e9dffda4cf5b5ea34d87bd8e23 # SVN: r148688  #  8292         Builds and ???
#_git_commit=b6680d727147ab31aa2248f2ba355b501d26cae2 # SVN: r148665  #  8287       Next25
#_git_commit=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7 # SVN: r148655  #  8280         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=c637b0fa0df8a3e7b03ccf7da8a6ad249b232d59 # SVN: r148651  #  8276       Next24
#_git_commit=cdfcf5f9c0d86170d56f798bc00df57e446c386c # SVN: r148640  #  8270       REDO  Error building shared libgcc undefined reference to `__addtf3'
#_git_commit=8288224021dddd4da854b43a046b1ce6851a3893 # SVN: r148621  #  8260         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=54c4ebb7a524b52febe148e226bf5bc94d8832ae # SVN: r148565  #  8248         Error building shared libgcc undefined reference to `__addtf3'
#_git_commit=1d6b0cb977867d02ca157620f2b440dc5faf7d65 # SVN: r148480  #  8197       Next26
#_git_commit=eb2969d5e6ecbcd9de53cb210bc03bf089ff6636 # SVN: r148361  #  8148         mpc configure: error: libmpfr not found or uses a different ABI.
#_git_commit=5f4a82c0c51befe5a6a4eae3e371cdeec85a7dd6 # SVN: r148280  #  8100         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=712b30cf6f380ea918f78d4ec208093df3566982 # SVN: r148241  #  8071       Next32
#_git_commit=faef1e6d29245f7ab50c45d52a127e29aac6f208 # SVN: r148196  #  8049         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=3240b4d6fc7faef114ba949f335d482bd7885c6c # SVN: r148025  #  7954         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=a1bda0d7e8e5f4aac6287f4f607952f056c8bedf # SVN: r148000  #  7941       Next29    mingw-tls.c: New file.
#_git_commit=acd262252cd2121bd1bb48ed8b28cf1ac6bc7aaf # SVN: r147996  #  7939         mpc configure: error: libgmp not found or uses a different ABI.
#_git_commit=cd9c1ca866b6aa5041a352e0ed07ae5f91e235e5 # SVN: r147995  #  7938       Next30
#_git_commit=36bac386ae2339359ebcee2473192c4171c5c7df # SVN: r147994  #  7937         ld.exe: cannot find -lmpc
#_git_commit=67f43f51c4097477c00e5ff5d052ff6126462ee9 # SVN: r147811  #  7828       Next28
#_git_commit=f256c06431521e45c8bdfa52d99ee481b7bf77ce # SVN: r147755  #  7797         ld.exe: cannot find -lmpc
#_git_commit=7d47ae1d6491907d3f6c5c870bb83dceac1551c4 # SVN: r147604  #  7716       Next31
#_git_commit=43e450d4ead8e4e6a348e14ad498d0388fa930b9 # SVN: r147458  #  7643         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=be537af6157d39f4c514086d683335feb57c1a47 # SVN: r146792  #  7272         mpfr configure: error: gmp.h can't be found, or is unusable.
#_git_commit=3270032c592202a31bf10b630ee825afed62a054 # SVN: r146781  #  7266       Next27
#_git_commit=3764d512d514c5011bf6473075444d49de284e05 # SVN: r146772  #  7260         Error building shared libgcc undefined reference to `__addtf3'
#_git_commit=a687f83c5ae302e0e1abff0af5992eeb02f510a7 # SVN: r146769  #  7259         ld.exe: cannot find -lmpc
#_git_commit=1c62e8f226cc63488e8a1d11d9aadfbf89514f93 # SVN: r146765  #  7257         ld.exe: cannot find -lmpc
#_git_commit=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f # SVN: r146761  #  7254         ld.exe: cannot find -lmpc
#_git_commit=350916301fe8afa02464e3ca84c70015ce2cf74b # SVN: r146529  #  7102         ld.exe: cannot find -lmpc   "gcc/config/i386/t-mingw-w64 added here"
#_git_commit=0267afc48d8f1e520d850241b73d4d68a56278cf # SVN: r146526  #  7101         Error building shared libgcc undefined reference to `__addtf3'
#_git_commit=2ba9daa701f829cd991006a9aa29b74b88831bc9 # SVN: r146525  #  7100         Error building shared libgcc undefined reference to `__addtf3'
#_git_commit=ad8a1ac09d45ba7a3596434b4bd38d698a87c28e # SVN: r146521  #  7099         Builds and CRT1 gives Error: operand size mismatch for `bsf'
#_git_commit=e54d52a8fb13d13b5ec27ef02617f053267d13b9 # SVN: r145124  # start 4.5.0   Builds and CRT1 gives Error: operand size mismatch for `bsf'
#_git_branch=releases/gcc-4.4                         # SVN: r??????  # end   4.4.?
#_git_branch=releases/gcc-4.3                         # SVN: r??????  # end   4.3.?
#_git_branch=releases/gcc-4.2                         # SVN: r??????  # end   4.2.?
_git_repo_url=git://github.com/stahta01/gcc4_main_development.git
_sourcedir=${_basename}4-main-dev-git

if [ -n "$_git_branch" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#branch=$_git_branch")
elif [ -n "$_git_tag" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#tag=$_git_tag")
elif [ -n "$_git_commit" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#commit=$_git_commit")
else
  source=(${_sourcedir}::"${_git_repo_url}")
fi
GMP_VERSION=4.3.2
MPFR_VERSION=2.4.2
MPC_VERSION=0.8.1
ISL_VERSION=0.15
CLOOG_VERSION=0.15.11
PPL_VERSION=0.10.2
noextract=("${_sourcedir}.tar.bz2"
           "mpfr-$MPFR_VERSION.tar.bz2"
           "gmp-$GMP_VERSION.tar.bz2"
           "mpc-$MPC_VERSION.tar.gz"
           "isl-$ISL_VERSION.tar.bz2"
           "cloog-ppl-${CLOOG_VERSION}.tar.gz"
           "ppl-${PPL_VERSION}.tar.gz")
source+=("ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-${GMP_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-${MPC_VERSION}.tar.gz"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-${ISL_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-${CLOOG_VERSION}.tar.gz"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/ppl-${PPL_VERSION}.tar.gz"
        130-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
        140-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch
        150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch
        210-gcc-4.4-ktietz-libgomp.patch
        801-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
        802-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch
        803-gcc-4.4-add-DWARF2_UNWIND_INFO-guard.patch
        804-gcc-4.5.0-Fix-texi-docs-syntax-errors.patch
        805-gcc-4.4-PR-bootstrap-56258.patch
        806-gcc-4.5.0-Fix-texi-docs-syntax-errors.patch
        807-gcc-4.5-Fix-texi-docs-syntax-errors.patch
        831-gcc-4.5.0-libssp-Add-bindir-flag.patch
        832-Backport-part-of-PR-bootstrap-53912.patch
        833-configure.ac-Detect-MPC-in-default-directory.patch)
sha256sums=('SKIP'
            'c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            'e664603757251fd8a352848276497a4c79b7f8b21fd8aedd5cc0598a38fee3e4'
            '8ceebbf4d9a81afa2b4449113cee4b7cb14a687d7a549a963deb5e2a41458b6b'
            '7cd634d0b2b401b04096b545915ac67f883556e9a524e8e803a6bf6217a84d5f'
            'd0389838575a7e003542fe996cce54bb0405f9a011424ba7384d12a634219e52'
            'c7870683c9e6b7606ed9e67f95c0deb9483844d04b8817fd95e1452da719a779'
            '06ec848499f2e802cd1da77341eea4e59d98e41cddd90769e7996a7b580ae6a7'
            '44d7f21e073c292e74ee7ee9858e31e993a4816af0a2ee09e0bb2acb557d2d33'
            'efd0d90eda577db320f1ed704efa5be87c4da09f1c95c3d067e0b563e477e579'
            'e0442e147448bd725d39bb8ce82b8e939ccc5b33b228388b43138022f1452b4c'
            '479ed5348b5946a0c1cf44d2ad5420fbd0a9b5266f11b7d4da222da1f0ba37d9'
            '61ea8447420cecad5c7dbe8dd29711f13afee076f87bc75105e11d9f64b820b9'
            '2cf58796ddc8df115b27fb9058f8368a587e446e1545f40efedd7790ba3996f0'
            '7f4b6dd96249f7bdc83f254f7f0ccf4704a89b52d63760ba9f4d5b8c4635ac04'
            '477e63bc51c75bce7cdef533f406b53eba23482bd797ad71d8ec519a5605c1b7'
            '1e6acefcabd0899ba94cdc7ae83c3e26a5096f182fd0747ff1d02cbf3b22c77e'
            'ab92b6c3ea40cd2fb74b6d8c94567d2b89b43ba32b0b286b8398489f1973f0c6'
            '260871784d1e78374d2545eb6edd88c42da381fd77d8cacea1984b6a8876397d'
            '9bdad91ac32ebfa774135af67083082fc8ab44d072472730cf020bef9a6f0869')

_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #

_git_base_commit=
_gcc_version=
_gcc_date=

pkgver() {
  cd ${srcdir}/${_sourcedir}
  printf "%s.d%s+%s.c%s.g%s" "$_gcc_version" "$_gcc_date" $(git rev-list --count $(git rev-list -1 ${_git_base_commit} gcc/DATESTAMP)..${_git_base_commit}) $(git rev-list --count ${_git_base_commit}..HEAD) $(git rev-parse --short ${_git_base_commit})
}

prepare() {
  cd ${srcdir}

  if [[ "$_enable_intree_gmp_etc" == "yes" ]]; then
    _extract_to_gcc_folder          gmp-${GMP_VERSION}.tar.bz2
    _extract_to_gcc_folder          mpfr-${MPFR_VERSION}.tar.bz2
    _extract_to_gcc_folder          mpc-${MPC_VERSION}.tar.gz
  else
    rm -fr ${srcdir}/${_sourcedir}/mpc
    rm -fr ${srcdir}/${_sourcedir}/mpfr
    rm -fr ${srcdir}/${_sourcedir}/gmp
  fi

  if [[ "$_enable_graphite" == "yes" ]]; then
    _extract_to_gcc_folder       isl-${ISL_VERSION}.tar.bz2
    _extract_to_gcc_folder       cloog-ppl-${CLOOG_VERSION}.tar.gz
    _extract_to_gcc_folder       ppl-${PPL_VERSION}.tar.gz
  else
    rm -fr ${srcdir}/${_sourcedir}/isl
    rm -fr ${srcdir}/${_sourcedir}/cloog
  fi

  cd ${srcdir}/${_sourcedir}

  _git_base_commit=$(git rev-parse HEAD)
  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  _gcc_date=$(head -n 34 gcc/DATESTAMP | sed -e 's/.* //' | tr -d '"\n')

  echo "CARCH := ${CARCH}"
  echo "_gcc_version := ${_gcc_version}"
  echo "_gcc_date := ${_gcc_date}"

  GIT_AM="git am --committer-date-is-author-date"

  # Don't waste valuable commandline chars on double-quotes around "arguments"
  #  that don't need them.
  ${GIT_AM} ${srcdir}/130-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

  # Make Windows behave the same as Posix in the consideration of whether folder
  # "/exists/doesnt-exist/.." is a valid path.. in Posix, it isn't.
  ${GIT_AM} ${srcdir}/140-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch

  # Don't make a lowercase backslashed path from argv[0]
  #  that then fail to strcmp with prefix(es) .. they're also ugly.
  ${GIT_AM} --whitespace=fix ${srcdir}/150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch

  # Kai's libgomp fix.
  ${GIT_AM} ${srcdir}/210-gcc-4.4-ktietz-libgomp.patch || $( true; git am --abort)

  # https://patchwork.ozlabs.org/patch/504982/
  ${GIT_AM} ${srcdir}/801-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch

  ${GIT_AM} ${srcdir}/802-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch
  ${GIT_AM} ${srcdir}/803-gcc-4.4-add-DWARF2_UNWIND_INFO-guard.patch || $( true; git am --abort)
  ${GIT_AM} --whitespace=fix ${srcdir}/804-gcc-4.5.0-Fix-texi-docs-syntax-errors.patch || $( true; git am --abort)
  ${GIT_AM} ${srcdir}/805-gcc-4.4-PR-bootstrap-56258.patch
  ${GIT_AM} ${srcdir}/806-gcc-4.5.0-Fix-texi-docs-syntax-errors.patch || $( true; git am --abort)
  ${GIT_AM} ${srcdir}/807-gcc-4.5-Fix-texi-docs-syntax-errors.patch || $( true; git am --abort)
  ${GIT_AM} ${srcdir}/831-gcc-4.5.0-libssp-Add-bindir-flag.patch || $( true; git am --abort)
  ${GIT_AM} ${srcdir}/832-Backport-part-of-PR-bootstrap-53912.patch || $( true; git am --abort)
  ${GIT_AM} ${srcdir}/833-configure.ac-Detect-MPC-in-default-directory.patch || $( true; git am --abort)

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  # do not expect $prefix/mingw symlink - this should be superceded by
  # 160-mingw-dont-ignore-native-system-header-dir.patch .. but isn't!
  [[ -f configure.src ]] && {
    rm -f configure
    cp configure.src configure
  } || {
    cp configure configure.src
  }
  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix
  [[ -f gcc/config/i386/mingw32.h.src ]] && {
    rm -f gcc/config/i386/mingw32.h
    cp gcc/config/i386/mingw32.h.src gcc/config/i386/mingw32.h
  } || {
    cp gcc/config/i386/mingw32.h gcc/config/i386/mingw32.h.src
  }
  local MINGW_CRT_NATIVE_PREFIX=$(cygpath -am ${_install_prefix}/${MINGW_CHOST})
  sed -i "s/\\/mingw\\//${MINGW_CRT_NATIVE_PREFIX//\//\\/}\\//g" gcc/config/i386/mingw32.h

  # FIX "The directory that should contain system headers does not exist: /mingw/include"
  sed -i "s|/mingw/include|/mingw32/include|g" gcc/config/i386/t-mingw32
  if [[ -f gcc/config/i386/t-mingw-w64 ]]; then
    sed -i "s|/mingw/include|/mingw64/include|g" gcc/config/i386/t-mingw-w64
  fi
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  local -a configure_opts

  # gcc 4.5 may have issues doing these link options
  LDFLAGS=${LDFLAGS/,--dynamicbase}
  LDFLAGS=${LDFLAGS/,--nxcompat}
  LDFLAGS=${LDFLAGS/,--high-entropy-va}

  echo "LDFLAGS := $LDFLAGS"
  echo "CFLAGS := $CFLAGS"

  local _gcc_driver_version=`eval "cat ${srcdir}/${_sourcedir}/gcc/BASE-VER"`

  case "${CARCH}" in
    i686)
      configure_opts+=("--enable-sjlj-exceptions")
      configure_opts+=("--without-dwarf2")
      LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
    ;;

    x86_64)
      configure_opts+=("--enable-sjlj-exceptions")
      configure_opts+=("--without-dwarf2")
      configure_opts+=("--enable-64bit")
      local _arch=x86-64
    ;;
  esac

  if check_option "debug" "n"; then
    configure_opts+=("--disable-libstdcxx-debug")
  else
    configure_opts+=("--enable-libstdcxx-debug")
  fi

  if [ "$_enable_3_stages" == "no" ]; then
    configure_opts+=("--disable-bootstrap")
  elif [ "$_enable_3_stages" == "yes" ]; then
    configure_opts+=("--enable-bootstrap")
  fi

  if [ "$_enable_graphite" == "yes" ]; then
    configure_opts+=("--enable-graphite")
  else
    configure_opts+=("--disable-graphite")
    configure_opts+=("--without-cloog")
    configure_opts+=("--without-isl")
  fi

  if [ "$_enable_threads" == "yes" ]; then
    configure_opts+=("--enable-threads=${_threads}")
  elif [ "$_enable_threads" == "no" ]; then
    configure_opts+=("--disable-threads")
  fi

  if [ "$_enable_libgomp" == "yes" ]; then
    configure_opts+=("--enable-libgomp")
  elif [ "$_enable_libgomp" == "no" ]; then
    configure_opts+=("--disable-libgomp")
  fi

  if [[ "$_enable_shared" == "yes" ]]; then
    configure_opts+=("--enable-shared")
  fi

  local _languages="c"
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
    configure_opts+=("--enable-gnattools")
  fi
  if [ "$_enable_cxx" == "yes" ]; then
    _languages+=",c++"
  else
    configure_opts+=("--disable-build-poststage1-with-cxx")
    configure_opts+=("--disable-build-with-cxx")
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi
  if [ "$_enable_objc" == "yes" ]; then
    _languages+=",objc,obj-c++"
  fi

  export PATH=${_install_prefix}/bin:$PATH

  echo "PATH := $PATH"

  pacman -Q ${OPT_PACKAGE_MINGW_PREFIX}-crt
  gcc --version
  gcc -dumpversion
  ld  --version
  if [ "$_enable_ada" == "yes" ]; then
    gnatbind  --version
  fi

#    --with-gmp-include="${_install_prefix}/include" \
#    --with-mpfr-include="${_install_prefix}/include" \
#    --with-mpc-include="${_install_prefix}/include" \
#    --with-gmp-lib="${_install_prefix}/lib" \
#    --with-mpfr-lib="${_install_prefix}/lib" \
#    --with-mpc-lib="${_install_prefix}/lib" \

  ../${_sourcedir}/configure \
    --with-build-time-tools=${_install_prefix}/bin \
    --program-suffix=${_gcc_suffix} \
    --prefix=${_install_prefix} \
    --with-local-prefix=${_install_prefix}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${_install_prefix}/${MINGW_CHOST}/include \
    --libexecdir=${_install_prefix}/lib \
    --with-gxx-include-dir=${_install_prefix}/include/c++/${_gcc_driver_version} \
    --enable-checking=release \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-static \
    --enable-libatomic \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --enable-version-specific-runtime-libs \
    --disable-lto \
    --disable-multilib \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv=${_install_prefix} \
    --with-zlib=${_install_prefix} \
    --with-pkgversion="Rev${pkgrel}, Built by TimS opt-MINGW-packages project" \
    --with-bugurl="https://github.com/stahta01/opt-MINGW-packages/issues" \
    --with-gnu-as --with-gnu-ld \
    "${configure_opts[@]}"

  make -j1 all

  rm -rf ${srcdir}${_install_prefix}

  make -j1 DESTDIR=${srcdir} install
  if [[ "$_enable_ada" == "yes" && "$_enable_shared" == "yes" ]]; then
    mv ${srcdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/adalib/*.dll ${srcdir}${_install_prefix}/bin/
  fi
}

package_opt-mingw-gcc-libs() {
  pkgdesc="GNU Compiler Collection (libraries) for (mingw-w64)"
  depends=()
  if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
    depends+=("${OPT_PACKAGE_MINGW_PREFIX}-libwinpthread")
  fi
  if [[ "$_enable_intree_gmp_etc" != "yes" ]]; then
    depends+=("${OPT_PACKAGE_MINGW_PREFIX}-gmp")
  fi
  provides=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-libs" "${OPT_PACKAGE_MINGW_PREFIX}-libssp")
  conflicts=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-libs")

  mkdir -p ${pkgdir}${_install_prefix}/bin

  cd ${srcdir}${_install_prefix}
  cp bin/libgcc*.dll ${pkgdir}${_install_prefix}/bin/
  cp bin/libssp*.dll ${pkgdir}${_install_prefix}/bin/
#  cp lib/gcc/${MINGW_CHOST}/bin/libssp*.dll ${pkgdir}${_install_prefix}/bin/
  if [ "$_enable_cxx" == "yes" ]; then
    cp bin/libstdc*.dll ${pkgdir}${_install_prefix}/bin/
  fi
  if [ "$_enable_libgomp" == "yes" ]; then
    cp bin/libgomp*.dll ${pkgdir}${_install_prefix}/bin/
  fi
}

package_opt-mingw-gcc() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for (mingw-w64)"
  depends=(
    "${OPT_PACKAGE_MINGW_PREFIX}-binutils"
    "${OPT_PACKAGE_MINGW_PREFIX}-zlib"
    "${OPT_PACKAGE_MINGW_PREFIX}-crt"
    "${OPT_PACKAGE_MINGW_PREFIX}-headers"
  )
  if [[ "$_enable_shared" == "yes" ]]; then
    depends+=("${OPT_PACKAGE_MINGW_PREFIX}-${_realname}-libs=${pkgver}-${pkgrel}")
  fi
  if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
    depends+=("${OPT_PACKAGE_MINGW_PREFIX}-winpthreads")
  fi
  provides=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base")
  conflicts=("${OPT_PACKAGE_MINGW_PREFIX}-${_basename}-base" "${OPT_PACKAGE_MINGW_PREFIX}-${_basename}")

  local _gcc_driver_version=`eval "cat ${srcdir}/${_sourcedir}/gcc/BASE-VER"`

  case "${CARCH}" in
    i686)
      local _lib_folders=lib32
    ;;

    x86_64)
      local _lib_folders=lib64
    ;;
  esac

  mkdir -p ${pkgdir}${_install_prefix}/{bin,include,lib,share}

  cd ${srcdir}${_install_prefix}
  cp bin/cpp.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/gcc.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/gcov.exe ${pkgdir}${_install_prefix}/bin/
  if [ "$_enable_cxx" == "yes" ]; then
    cp bin/c++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/g++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/${MINGW_CHOST}-c++.exe ${pkgdir}${_install_prefix}/bin/
    cp bin/${MINGW_CHOST}-g++.exe ${pkgdir}${_install_prefix}/bin/
  fi
  cp bin/${MINGW_CHOST}-gcc-${_gcc_driver_version}.exe ${pkgdir}${_install_prefix}/bin/
  cp bin/${MINGW_CHOST}-gcc.exe ${pkgdir}${_install_prefix}/bin/

  mkdir -p ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include/*.h           ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include/ssp        ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/include-fixed      ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp -r lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/install-tools      ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/cc1.exe               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/collect2.exe          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/crt*.o                ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libgcc*               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libgcov.*             ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  if [ "$_enable_libgomp" == "yes" ]; then
    cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libgomp.*           ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  fi
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libssp*               ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
#  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/lto*.exe              ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/

  if [[ -f ${srcdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_lib_folders}/libgcc_s.a ]]; then
    cp ${srcdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_lib_folders}/libgcc_s.a ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  fi
  if [[ -f ${srcdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/libgcc_s.a ]]; then
    cp ${srcdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/libgcc_s.a ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  fi

  if [ "$_enable_cxx" == "yes" ]; then
    cp -r include/c++ ${pkgdir}${_install_prefix}/include/
    cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/cc1plus.exe         ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
    cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libstdc++*          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
    cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/libsupc++*          ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  fi

  if [ "$_enable_cxx" == "yes" ]; then
    mkdir -p ${pkgdir}${_install_prefix}/share/gcc-${_gcc_driver_version}/python
    cp -r share/gcc-${_gcc_driver_version}/python/libstdcxx              ${pkgdir}${_install_prefix}/share/gcc-${_gcc_driver_version}/python/
  fi

  mkdir -p ${pkgdir}${_install_prefix}/share/{doc,info,locale,man}
  if [[ -d ${srcdir}${_install_prefix}/share/info ]]; then
    cd ${srcdir}${_install_prefix}/share
  fi
  cp info/cpp.info*                                                   ${pkgdir}${_install_prefix}/share/info/
  cp info/cppinternals.info*                                          ${pkgdir}${_install_prefix}/share/info/
  cp info/gcc.info*                                                   ${pkgdir}${_install_prefix}/share/info/
  cp info/gccinstall.info*                                            ${pkgdir}${_install_prefix}/share/info/
  cp info/gccint.info*                                                ${pkgdir}${_install_prefix}/share/info/
  if [ "$_enable_libgomp" == "yes" ]; then
    cp info/libgomp.info*                                             ${pkgdir}${_install_prefix}/share/info/
  fi

  mkdir -p ${pkgdir}${_install_prefix}/share/man/man1
  if [[ -d ${srcdir}${_install_prefix}/share/man ]]; then
    cd ${srcdir}${_install_prefix}/share
  fi
  cp man/man1/cpp.1*                                                  ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man1/gcc.1*                                                  ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man1/gcov.1*                                                 ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/fsf-funding.7*                                          ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/gfdl.7*                                                 ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/gpl.7*                                                  ${pkgdir}${_install_prefix}/share/man/man1/
  if [ "$_enable_cxx" == "yes" ]; then
    cp man/man1/g++.1*                                                ${pkgdir}${_install_prefix}/share/man/man1/
  fi
}

package_opt-mingw-gcc-ada() {
  pkgdesc="GNU Compiler Collection (Ada) for (mingw-w64)"
  depends=("${OPT_PACKAGE_MINGW_PREFIX}-${_realname}=${pkgver}-${pkgrel}")

  local _gcc_driver_version=`eval "cat ${srcdir}/${_sourcedir}/gcc/BASE-VER"`

  mkdir -p ${pkgdir}${_install_prefix}/{bin,lib,share}

  cd ${srcdir}${_install_prefix}
  cp bin/gnat*.exe ${pkgdir}${_install_prefix}/bin/

  if [[ "$_enable_shared" == "yes" ]]; then
    cp bin/{libgnarl*,libgnat*}.dll ${pkgdir}${_install_prefix}/bin/
  fi

  mkdir -p ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}
  cp -r lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/adainclude         ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp -r lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/adalib             ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/
  cp lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/gnat1.exe             ${pkgdir}${_install_prefix}/lib/gcc/${MINGW_CHOST}/${_gcc_driver_version}/

  mkdir -p ${pkgdir}${_install_prefix}/share/info
  cp share/info/gnat-style.info*                            ${pkgdir}${_install_prefix}/share/info/
  cp share/info/gnat_rm.info*                               ${pkgdir}${_install_prefix}/share/info/
  cp share/info/gnat_ugn.info*                              ${pkgdir}${_install_prefix}/share/info/
}

# Wrappers for package functions

# 32-bit wrappers
package_opt-mingw-i686-gcc4-libs() {
  package_opt-mingw-gcc-libs
}

package_opt-mingw-i686-gcc4() {
  package_opt-mingw-gcc
}

package_opt-mingw-i686-gcc4-ada() {
  package_opt-mingw-gcc-ada
}

# 64-bit wrappers
package_opt-mingw-x86_64-gcc4-libs() {
  package_opt-mingw-gcc-libs
}

package_opt-mingw-x86_64-gcc4() {
  package_opt-mingw-gcc
}

package_opt-mingw-x86_64-gcc4-ada() {
  package_opt-mingw-gcc-ada
}
